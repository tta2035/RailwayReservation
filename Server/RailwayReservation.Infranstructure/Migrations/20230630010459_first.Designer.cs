// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RailwayReservation.Infranstructure.Persistance;

#nullable disable

namespace RailwayReservation.Infranstructure.Migrations
{
    [DbContext(typeof(RailwayReservationDbContext))]
    [Migration("20230630010459_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RailwayReservation.Domain.BankingPassenger.BankingPassenger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BankingPassengerID");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PassengerID");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentMethodID");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex(new[] { "BankAccountNumber" }, "IX_BankingPassenger_1")
                        .IsUnique();

                    b.ToTable("BankingPassenger", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Booking.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingID");

                    b.Property<decimal?>("CancellationFee")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancellationTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("DefaultPaymentMethod")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DefaultPaymentMethod");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PassengerId");

                    b.Property<Guid?>("PassengerPaymentMethod")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PassengerPaymentMethod");

                    b.Property<DateTime>("PaymentTerm")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalFare")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("DefaultPaymentMethod");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PassengerPaymentMethod");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.BookingTicket.BookingTicket", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingID");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TicketID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("BookingId", "TicketId");

                    b.HasIndex("TicketId");

                    b.ToTable("BookingTicket", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Coach.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CoachID");

                    b.Property<string>("CoachNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainID");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.HasIndex(new[] { "CoachNo" }, "IX_Coach")
                        .IsUnique();

                    b.ToTable("Coach", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Function.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FunctionID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FunctionName" }, "IX_Function_1")
                        .IsUnique();

                    b.ToTable("Function", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Group.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupName" }, "IX_Group_1")
                        .IsUnique();

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.GroupFunction.GroupFunction", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupID");

                    b.Property<Guid>("FunctionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FunctionID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("GroupId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.ToTable("GroupFunction", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.GroupUser.GroupUser", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUser", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Paid.Paid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaidID");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Paid", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Passenger.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PassengerID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Genger")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Token")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("token");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email", "PhoneNo" }, "IX_Passenger_1")
                        .IsUnique()
                        .HasFilter("[PhoneNo] IS NOT NULL");

                    b.ToTable("Passenger", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.PaymentMethod.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentMethodID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PaymentMethodName" }, "IX_PaymentMethod_1")
                        .IsUnique();

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Refund.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RefundID");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BookingID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("RefundTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Refund", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Route.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RouteID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("DepartureStation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepartureStation");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DestinationStation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DestinationStation");

                    b.Property<decimal>("RouteFare")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("DepartureStation");

                    b.HasIndex("DestinationStation");

                    b.HasIndex(new[] { "RouteName" }, "IX_Route_1")
                        .IsUnique();

                    b.ToTable("Route", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Seat.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeatID");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CoachID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SeatTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeatTypeID");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex(new[] { "SeatNo" }, "IX_Seat_1")
                        .IsUnique();

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.SeatType.SeatType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeatTypeID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RaitoFare")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SeatTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SeatTypeName" }, "IX_SeatType_1")
                        .IsUnique();

                    b.ToTable("SeatType", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Station.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StationID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StationName" }, "IX_Station_1")
                        .IsUnique();

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Ticket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TicketID");

                    b.Property<DateTime>("ArriveTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Fare")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RouteID");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SeatID");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainID");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TrainId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.Train.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TrainName" }, "IX_Train_1")
                        .IsUnique();

                    b.ToTable("Train", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime?>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("updateBy");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateTime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email", "UserName" }, "IX_User_1")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RailwayReservation.Domain.BankingPassenger.BankingPassenger", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Passenger.Passenger", "Passenger")
                        .WithMany("BankingPassengers")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("FK_BankingPassenger_Passenger");

                    b.HasOne("RailwayReservation.Domain.PaymentMethod.PaymentMethod", "PaymentMethod")
                        .WithMany("BankingPassengers")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_BankingPassenger_PaymentMethod1");

                    b.Navigation("Passenger");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Booking.Booking", b =>
                {
                    b.HasOne("RailwayReservation.Domain.PaymentMethod.PaymentMethod", "DefaultPaymentMethodNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("DefaultPaymentMethod")
                        .HasConstraintName("FK_Booking_PaymentMethod");

                    b.HasOne("RailwayReservation.Domain.Passenger.Passenger", "Passenger")
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Passenger");

                    b.HasOne("RailwayReservation.Domain.BankingPassenger.BankingPassenger", "PassengerPaymentMethodNavigation")
                        .WithMany("Bookings")
                        .HasForeignKey("PassengerPaymentMethod")
                        .HasConstraintName("FK_Booking_BankingPassenger");

                    b.Navigation("DefaultPaymentMethodNavigation");

                    b.Navigation("Passenger");

                    b.Navigation("PassengerPaymentMethodNavigation");
                });

            modelBuilder.Entity("RailwayReservation.Domain.BookingTicket.BookingTicket", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Booking.Booking", "Booking")
                        .WithMany("BookingTickets")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingTicket_Booking");

                    b.HasOne("RailwayReservation.Domain.Ticket.Ticket", "Ticket")
                        .WithMany("BookingTickets")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingTicket_Ticket");

                    b.Navigation("Booking");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Coach.Coach", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Train.Train", "Train")
                        .WithMany("Coaches")
                        .HasForeignKey("TrainId")
                        .IsRequired()
                        .HasConstraintName("FK_Coach_Train");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("RailwayReservation.Domain.GroupFunction.GroupFunction", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Function.Function", "Function")
                        .WithMany("GroupFunctions")
                        .HasForeignKey("FunctionId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupFunction_Function");

                    b.HasOne("RailwayReservation.Domain.Group.Group", "Group")
                        .WithMany("GroupFunctions")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupFunction_Group");

                    b.Navigation("Function");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RailwayReservation.Domain.GroupUser.GroupUser", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Group.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupUser_Group");

                    b.HasOne("RailwayReservation.Domain.User.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupUser_User");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Paid.Paid", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Booking.Booking", "Booking")
                        .WithMany("Paids")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Paid_Booking");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Refund.Refund", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Booking.Booking", "Booking")
                        .WithMany("Refunds")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_Refund_Booking");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Route.Route", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Station.Station", "DepartureStationNavigation")
                        .WithMany("RouteDepartureStationNavigations")
                        .HasForeignKey("DepartureStation")
                        .IsRequired()
                        .HasConstraintName("FK_Route_Station");

                    b.HasOne("RailwayReservation.Domain.Station.Station", "DestinationStationNavigation")
                        .WithMany("RouteDestinationStationNavigations")
                        .HasForeignKey("DestinationStation")
                        .IsRequired()
                        .HasConstraintName("FK_Route_Destination_Station");

                    b.Navigation("DepartureStationNavigation");

                    b.Navigation("DestinationStationNavigation");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Seat.Seat", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Coach.Coach", "Coach")
                        .WithMany("Seats")
                        .HasForeignKey("CoachId")
                        .IsRequired()
                        .HasConstraintName("FK_Seat_Coach");

                    b.HasOne("RailwayReservation.Domain.SeatType.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Seat_SeatType");

                    b.Navigation("Coach");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Ticket.Ticket", b =>
                {
                    b.HasOne("RailwayReservation.Domain.Route.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Route");

                    b.HasOne("RailwayReservation.Domain.Seat.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Seat");

                    b.HasOne("RailwayReservation.Domain.Train.Train", "Train")
                        .WithMany("Tickets")
                        .HasForeignKey("TrainId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Train");

                    b.Navigation("Route");

                    b.Navigation("Seat");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("RailwayReservation.Domain.BankingPassenger.BankingPassenger", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Booking.Booking", b =>
                {
                    b.Navigation("BookingTickets");

                    b.Navigation("Paids");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Coach.Coach", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Function.Function", b =>
                {
                    b.Navigation("GroupFunctions");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Group.Group", b =>
                {
                    b.Navigation("GroupFunctions");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Passenger.Passenger", b =>
                {
                    b.Navigation("BankingPassengers");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RailwayReservation.Domain.PaymentMethod.PaymentMethod", b =>
                {
                    b.Navigation("BankingPassengers");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Route.Route", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Seat.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("RailwayReservation.Domain.SeatType.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Station.Station", b =>
                {
                    b.Navigation("RouteDepartureStationNavigations");

                    b.Navigation("RouteDestinationStationNavigations");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Ticket.Ticket", b =>
                {
                    b.Navigation("BookingTickets");
                });

            modelBuilder.Entity("RailwayReservation.Domain.Train.Train", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("RailwayReservation.Domain.User.User", b =>
                {
                    b.Navigation("GroupUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
